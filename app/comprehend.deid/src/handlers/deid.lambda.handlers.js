"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handleDeidSQSRequest = void 0;
const Debug = require("debug");
const debug = Debug("DEBUG::FUNCTIONS::HANDLERS::deid.lambda.handlers.ts");
const trace = Debug("TRACE::FUNCTIONS::HANDLERS::deid.lambda.handlers.ts");
const info = Debug("INFO::FUNCTIONS::HANDLERS::deid.lambda.handlers.ts");
const warn = Debug("WARN::FUNCTIONS::HANDLERS::deid.lambda.handlers.ts");
const error = Debug("ERROR::FUNCTIONS::HANDLERS::deid.lambda.handlers.ts");
/**
 * Handles De-ID requests from SQS
 * @param {SQSEvent} event SQS event containing records from SQS input queue
 * @returns {SQSBatchResponse} batch item failures record
 */
async function handleDeidSQSRequest(event) {
    info("received request");
    debug(`received request ${JSON.stringify(event)}`);
    const retVal = {};
    retVal.batchItemFailures = [];
    const records = event.Records.map((record) => {
        const body = JSON.parse(record.body);
        return body;
    });
    return retVal;
}
exports.handleDeidSQSRequest = handleDeidSQSRequest;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVpZC5sYW1iZGEuaGFuZGxlcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJkZWlkLmxhbWJkYS5oYW5kbGVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSwrQkFBK0I7QUFHL0IsTUFBTSxLQUFLLEdBQUcsS0FBSyxDQUFDLHFEQUFxRCxDQUFDLENBQUM7QUFDM0UsTUFBTSxLQUFLLEdBQUcsS0FBSyxDQUFDLHFEQUFxRCxDQUFDLENBQUM7QUFDM0UsTUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLG9EQUFvRCxDQUFDLENBQUM7QUFDekUsTUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLG9EQUFvRCxDQUFDLENBQUM7QUFDekUsTUFBTSxLQUFLLEdBQUcsS0FBSyxDQUFDLHFEQUFxRCxDQUFDLENBQUM7QUFFM0U7Ozs7R0FJRztBQUNJLEtBQUssVUFBVSxvQkFBb0IsQ0FBQyxLQUFlO0lBQ3RELElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0lBQ3pCLEtBQUssQ0FBQyxvQkFBb0IsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDbkQsTUFBTSxNQUFNLEdBQUcsRUFBc0IsQ0FBQztJQUN0QyxNQUFNLENBQUMsaUJBQWlCLEdBQUcsRUFBRSxDQUFDO0lBQzlCLE1BQU0sT0FBTyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBaUIsRUFBRSxFQUFFO1FBQ3BELE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBMkIsQ0FBQztRQUMvRCxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDLENBQUMsQ0FBQztJQUVILE9BQU8sTUFBTSxDQUFDO0FBQ2xCLENBQUM7QUFYRCxvREFXQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNRU0JhdGNoUmVzcG9uc2UsIFNRU0V2ZW50LCBTUVNSZWNvcmQgfSBmcm9tIFwiYXdzLWxhbWJkYVwiO1xuaW1wb3J0ICogYXMgRGVidWcgZnJvbSBcImRlYnVnXCI7XG5pbXBvcnQgeyBUcmFuc2NyaWJlTWVzc2FnZUV2ZW50IH0gZnJvbSBcIi4uL21vZGVscy90cmFuc2NyaWJlLW1lc3NhZ2VcIjtcblxuY29uc3QgZGVidWcgPSBEZWJ1ZyhcIkRFQlVHOjpGVU5DVElPTlM6OkhBTkRMRVJTOjpkZWlkLmxhbWJkYS5oYW5kbGVycy50c1wiKTtcbmNvbnN0IHRyYWNlID0gRGVidWcoXCJUUkFDRTo6RlVOQ1RJT05TOjpIQU5ETEVSUzo6ZGVpZC5sYW1iZGEuaGFuZGxlcnMudHNcIik7XG5jb25zdCBpbmZvID0gRGVidWcoXCJJTkZPOjpGVU5DVElPTlM6OkhBTkRMRVJTOjpkZWlkLmxhbWJkYS5oYW5kbGVycy50c1wiKTtcbmNvbnN0IHdhcm4gPSBEZWJ1ZyhcIldBUk46OkZVTkNUSU9OUzo6SEFORExFUlM6OmRlaWQubGFtYmRhLmhhbmRsZXJzLnRzXCIpO1xuY29uc3QgZXJyb3IgPSBEZWJ1ZyhcIkVSUk9SOjpGVU5DVElPTlM6OkhBTkRMRVJTOjpkZWlkLmxhbWJkYS5oYW5kbGVycy50c1wiKTtcblxuLyoqXG4gKiBIYW5kbGVzIERlLUlEIHJlcXVlc3RzIGZyb20gU1FTXG4gKiBAcGFyYW0ge1NRU0V2ZW50fSBldmVudCBTUVMgZXZlbnQgY29udGFpbmluZyByZWNvcmRzIGZyb20gU1FTIGlucHV0IHF1ZXVlXG4gKiBAcmV0dXJucyB7U1FTQmF0Y2hSZXNwb25zZX0gYmF0Y2ggaXRlbSBmYWlsdXJlcyByZWNvcmRcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGhhbmRsZURlaWRTUVNSZXF1ZXN0KGV2ZW50OiBTUVNFdmVudCk6IFByb21pc2U8U1FTQmF0Y2hSZXNwb25zZT4ge1xuICAgIGluZm8oXCJyZWNlaXZlZCByZXF1ZXN0XCIpO1xuICAgIGRlYnVnKGByZWNlaXZlZCByZXF1ZXN0ICR7SlNPTi5zdHJpbmdpZnkoZXZlbnQpfWApO1xuICAgIGNvbnN0IHJldFZhbCA9IHt9IGFzIFNRU0JhdGNoUmVzcG9uc2U7XG4gICAgcmV0VmFsLmJhdGNoSXRlbUZhaWx1cmVzID0gW107XG4gICAgY29uc3QgcmVjb3JkcyA9IGV2ZW50LlJlY29yZHMubWFwKChyZWNvcmQ6IFNRU1JlY29yZCkgPT4ge1xuICAgICAgICBjb25zdCBib2R5ID0gSlNPTi5wYXJzZShyZWNvcmQuYm9keSkgYXMgVHJhbnNjcmliZU1lc3NhZ2VFdmVudDtcbiAgICAgICAgcmV0dXJuIGJvZHk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gcmV0VmFsO1xufVxuIl19